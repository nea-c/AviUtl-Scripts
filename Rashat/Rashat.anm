--track0:in/out,-100,100,0,0.01
--track1:ズレ,0,100,10,0.01
--track2:seed(in),0,9000,0,1
--track3:seed(out),0,9000,0,1
--dialog:CurveEditor,_1={{1,0}, {1,0}};移動距離,_2={100,100};有効方向指定,_3="x,-x,y,-y";被りあり/chk,_4=0;フェード/chk,_5=0;in/out非表示/chk,_6=1;拡大率,_7=0;ぼかし,_8=0;order[0/4],_9={0,0};
--check0:seed(out)を(in)に同期,1;


local ease=_1
local vector=_2

function split(str, delim)
      if string.find(str, delim) == nil then
          return { str }
      end
  
      local result = {}
      local pat = "(.-)" .. delim .. "()"
      local lastPos
      for part, pos in string.gmatch(str, pat) do
          table.insert(result, part)
          lastPos = pos
      end
      table.insert(result, string.sub(str, lastPos))
      return result
end

function sortDirection(list)

      local data = {}
      local data_return = {}

      for index,key in pairs(list) do
            data[key] = true
      end

      if data["x"] then
            table.insert(data_return,"x")
      end
      if data["-x"] then
            table.insert(data_return,"-x")
      end
      if data["y"] then
            table.insert(data_return,"y")
      end
      if data["-y"] then
            table.insert(data_return,"-y")
      end
      if data["z"] then
            table.insert(data_return,"z")
      end
      if data["-z"] then
            table.insert(data_return,"-z")
      end

      return data_return
end

local enableDirection = sortDirection(split(_3, ","))


local same_b = (_4 == 1)
local fd=_5
local io_d=_6
local zm=_7
local bl=_8
local ord=_9

_1=nil _2=nil _3=nil _4=nil _5=nil _6=nil _7=nil _8=nil _9=nil



local function clamp(x)
      return (x <= 0 and 0) or (x >= 1 and 1) or x
end
local function lerp(t, a, b)
      return t * (b - a) + a
end
local function linear(t, a, b, A, B)
      return clamp((t - a) / (b - a)) * (B - A) + A
end
local function smooth(x)
      return x * x * (3 - 2 * x)
end
local function sequence(t, delay, index, num)
      if (t < 0) then
            t, index = -t, num - index
      end
      return clamp(t * (1 + delay * num) - delay * index)
end

local function shuffle_tbl(tbl, seed)
      local count = #tbl
      math.randomseed(seed or 0)
      local j
      for i = count, 2, -1 do
            j = math.random(i)
            tbl[i], tbl[j] = tbl[j], tbl[i]
      end
      return tbl
end

local function TA_spd(g)
      g = g or 0
      local l, i, t = obj.layer, obj.index, obj.time
      local rate = 1 / obj.framerate
      local k = {obj.x * g + obj.ox, obj.y * g + obj.oy, 0, obj.rz}
      SPD = SPD or {}
      SPD[l] = SPD[l] or {t = 0}
      if SPD[l][i] == nil then
            SPD[l][i] = k
      end
      local s = SPD[l][i][3]
      local r = SPD[l][i][4]
      local ending = (obj.time == obj.totaltime) and (SPD[l].t <= t)
      if ending or (SPD[l].t < t) then
            local x, y = k[1] - SPD[l][i][1], k[2] - SPD[l][i][2]
            s = math.sqrt(x * x + y * y)
            s = math.log(s / 10 + 1, 10)
            if (s > 0) then
                  r = math.deg(math.atan2(y, x)) + 90
            end
            SPD[l][i] = {k[1], k[2], s, r}
            if (i == obj.num - 1) then
                  SPD[l].t = t
            end
      elseif (SPD[l].t > t) then
            SPD[l][i] = k
            if (i == obj.num - 1) then
                  SPD[l].t = t
            end
      end
      return s, r
end

local Order = {
      [0] = function()
            return obj.index
      end,
      function()
            return (obj.num - 1) - obj.index
      end,
      function()
            return math.abs((obj.num) - obj.index * 2 - 1)
      end,
      function()
            return obj.num - math.abs((obj.num) - obj.index * 2 - 1)
      end,
      function(seed)
            local id = {}
            for i = 1, obj.num do
                  id[i] = i - 1
            end
            return shuffle_tbl(id, seed)[obj.index + 1]
      end
}

local colorize = {0xd5e6ca, 0xa10a31, 0x5ba6a5, 0x170f1f, 0xdfdfd9}

if tostring(ease):find("table:") then
      if not tostring(ease[1]):find("table:") then
            ease = {ease, ease}
      end
else
      return
end

if not tostring(vector):find("table:") then
      vector = {vector, vector}
end

local easein = ease[1]
local easeout = ease[2] or ease[1]

ease = {type(easein),type(easeout)}

local module_name = "curve_editor"
if not package.loaded[module_name] then
      package.preload[module_name] = package.loadlib(module_name .. ".auf", "luaopen_" .. module_name)
      require(module_name)
      package.preload[module_name] = nil
end
Ease = function(x, n)
      local load_type = (n[1] == 1 or n[1] == 2) and n[1] or 1
      local par = n[2]
      local ratio = x
      local st, ed = -0.0001, 1
      if load_type == 1 then
            if (-2147483647 <= par and par <= -12368443) or (12368443 <= par and par <= 2147483646) then
                  return curve_editor.getcurve(0,par,ratio,st,ed)
            elseif 1 <= par and par <= 1024 then
                  return curve_editor.getcurve(1,par,ratio,st,ed)
            end
      elseif load_type == 2 then
            if (-10211201 <= par and par <= -1) or (1 <= par and par <= 10211201) then
                  return curve_editor.getcurve(3,par,ratio,st,ed)
            elseif (-11213202 <= par and par <= -10211202) or (10211202 <= par and par <= 11213202) then
                  return curve_editor.getcurve(4,par,ratio,st,ed)
            end
      end
      return x
end

if not tostring(pos):find("table:") then
      pos = {pos, 0, 0}
end
if not tostring(rot):find("table:") then
      rot = {rot, 0, 0}
end
if not tostring(poso):find("table:") then
      poso = {poso, 0, 0}
end
if not tostring(roto):find("table:") then
      roto = {roto, 0, 0}
end
if not tostring(ord):find("table:") then
      ord = {ord, ord}
end
if not tostring(sd):find("table:") then
      sd = {sd, sd}
end
if not tostring(zm):find("table:") then
      zm = {zm, zm}
end

local default = {0, 0, 0}
setmetatable(pos, {__index = default})
setmetatable(rot, {__index = default})
setmetatable(poso, {__index = pos})
setmetatable(roto, {__index = rot})
setmetatable(ord, {__index = default})

local prog = obj.track0 * 0.01
local st = (prog < 0 and prog) or 0
local ed = (prog > 0 and prog) or 0
local delay = obj.track1 * 0.01
local seedin = obj.track2
local seedout = obj.track3
if (obj.check0) then
      seedout = seedin
end
local sd = {seedin, seedout}
math.randomseed((seed or 0))

local vs, ve = 0, 0
if (st <= 1) then
      vs = sequence(st, delay, Order[ord[1] % 5](sd[1]), obj.num - 1)
      vs = 1 - Ease(1 - vs, easein)
end

if (ed > 0) then
      ed = -(1 - ed)
      ve = sequence(ed, delay, Order[ord[2] % 5](sd[2] or sd[1]), obj.num - 1)
      ve = 1 - Ease(ve, easeout)
end
local r, ro, a, ao
r = obj.randex(sd[1], obj.index)(1, math.max(#enableDirection,1))
ro = obj.randex(sd[2], obj.index)(1, math.max(#enableDirection,1))
a, ao = enableDirection[r], enableDirection[ro]
if (obj.index ~= 0) then
      if (a == NeAc_TANormalRand[obj.index-1][obj.layer][sd[1].."-"..sd[2]][1] and not same_b) then
            r = ((r + 1) > #enableDirection) and 1 or r+1
            a = enableDirection[r]
      end
      if (ao == NeAc_TANormalRand[obj.index-1][obj.layer][sd[1].."-"..sd[2]][2] and not same_b) then
            ro = ((ro + 1) > #enableDirection) and 1 or ro+1
            ao = enableDirection[ro]
      end
end
if NeAc_TANormalRand == nil then NeAc_TANormalRand = {} end
if NeAc_TANormalRand[obj.index] == nil then NeAc_TANormalRand[obj.index] = {} end
if NeAc_TANormalRand[obj.index][obj.layer] == nil then NeAc_TANormalRand[obj.index][obj.layer] = {} end
NeAc_TANormalRand[obj.index][obj.layer][sd[1].."-"..sd[2]] = {a, ao}
local pos = {(a=="x" and 1 or a=="-x" and -1 or 0) * vector[1], (a=="y" and 1 or a=="-y" and -1 or 0) * vector[1], (a=="z" and 1 or a=="-z" and -1 or 0) * vector[1]}
local poso = {(ao=="x" and 1 or ao=="-x" and -1 or 0) * vector[2], (ao=="y" and 1 or ao=="-y" and -1 or 0) * vector[2], (ao=="z" and 1 or ao=="-z" and -1 or 0) * vector[2]}

local va = 1 - (1 - vs) * (1 - ve)
obj.ox = obj.ox + pos[1] * vs + poso[1] * ve
obj.oy = obj.oy + pos[2] * vs + poso[2] * ve
obj.oz = obj.oz + pos[3] * vs + poso[3] * ve
obj.rx = obj.rx
obj.ry = obj.ry
obj.rz = obj.rz + rot[1] * vs + rot[2] * ve
obj.zoom = obj.zoom + zm[1] * 0.01 * va * vs + zm[2] * 0.01 * ve
obj.alpha = obj.alpha * ((fd == 1) and (1 - math.abs(va)) or ((io_d == 1) and (1 - ((math.ceil(math.abs(va)*1000)/1000 < 1) and 0 or 1) ) or 1))


if (bl > 0) and (va > 0) then
      obj.effect("ぼかし", "範囲", bl * va)
elseif (bl < 0) then
      local s, r = TA_spd(1)
      local va0 = 1
      obj.effect("色ずれ", "type", 4, "ずれ幅", -bl * 0.75 * va0, "強さ", s * 100, "角度", r)
      obj.effect("方向ブラー", "範囲", -bl * s * va0, "角度", r)
end

-- 座標情報をPOSで垂れ流し
if (obj.index == 0) then
      POS = {}
      POS.v = {}
      -- 文字がスペースや特定の記号だと処理が飛ぶフォントがあり、
      -- テーブルにnilが入るためシーケンスでなくなってしまう(=indexが連続していない)
      -- なので適当な変数を用意してobj.indexの代わりに使う
      i_index = 0
end
if (obj.ox) then
      -- obj.indexより大きくならないようにする(スクリプト複数付けた場合の対策)
      i_index = (i_index <= obj.index and (i_index + 1)) or i_index
      POS[i_index * 3 - 2] = (obj.x + obj.ox)
      POS[i_index * 3 - 1] = (obj.y + obj.oy)
      POS[i_index * 3] = (obj.z + obj.oz)
      POS.v[i_index] = {obj.x + obj.ox, obj.y + obj.oy, obj.z + obj.oz}
end

-- 結果を垂れ流し
TA_N = va